// <auto-generated />
using System;
using LingvoGameOs.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LingvoGameOs.Db.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250514173644_AddPropToGame")]
    partial class AddPropToGame
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("LingvoGameOs.Db.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverImageURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GamePlatformId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GameURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LanguageLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberDownloads")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("RaitingPlayers")
                        .HasColumnType("REAL");

                    b.Property<double>("RaitingTeachers")
                        .HasColumnType("REAL");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId1")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GamePlatformId");

                    b.HasIndex("LanguageLevelId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "23691240-2d4a-4354-8d9a-41e6fd99c8f7",
                            CoverImageURL = "/img/games/mountain labyrinth-banner.png",
                            Description = "Отправляйтесь в увлекательное путешествие, проходите сказочные лабиринты и создавайте собственные в удобном редакторе.",
                            GamePlatformId = 2,
                            GameURL = "/home/index",
                            LanguageLevelId = 1,
                            LastUpdateDate = new DateTime(2025, 5, 14, 17, 36, 44, 82, DateTimeKind.Utc).AddTicks(3585),
                            NumberDownloads = 1000,
                            PublicationDate = new DateTime(2025, 5, 14, 17, 36, 44, 82, DateTimeKind.Utc).AddTicks(3582),
                            RaitingPlayers = 4.5999999999999996,
                            RaitingTeachers = 4.7999999999999998,
                            Rules = "Правила еще находятся в разработке. Простите за неудобства.",
                            Title = "Горный лабиринт"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = "23691240-2d4a-4354-8d9a-41e6fd99c8f7",
                            CoverImageURL = "/img/games/art-object-banner.png",
                            Description = "Супер интересная викторина для компании. Поможет найти арт пространства и расскажет о них много интересного.",
                            GamePlatformId = 1,
                            GameURL = "/home/index",
                            LanguageLevelId = 1,
                            LastUpdateDate = new DateTime(2025, 5, 14, 17, 36, 44, 82, DateTimeKind.Utc).AddTicks(3589),
                            NumberDownloads = 241,
                            PublicationDate = new DateTime(2025, 5, 14, 17, 36, 44, 82, DateTimeKind.Utc).AddTicks(3589),
                            RaitingPlayers = 4.4000000000000004,
                            RaitingTeachers = 4.0,
                            Rules = "Слушайте гида и выбирайте правильные ответы на его вопросы. Изначально у всех участников 50 баллов, но за неправильный ответ снимают 5 баллов.",
                            Title = "Тур-викторина 'Арт объекты Осетии'"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = "23691240-2d4a-4354-8d9a-41e6fd99c8f7",
                            CoverImageURL = "/img/games/gameplay-animal.png",
                            Description = "Игра состоит из двух уровней никак не связанных друг с другом. После открытия сайта пользователь попадает на главное окно. Там он может ознакомится с правилами игры, а также просмотреть список лидеров и увидеть свой уровень достижений И зарегистрироваться/войти в аккаунт.",
                            GamePlatformId = 3,
                            GameURL = "http://84.201.144.125:5001",
                            LanguageLevelId = 2,
                            LastUpdateDate = new DateTime(2025, 5, 14, 17, 36, 44, 82, DateTimeKind.Utc).AddTicks(3592),
                            NumberDownloads = 5,
                            PublicationDate = new DateTime(2025, 5, 14, 17, 36, 44, 82, DateTimeKind.Utc).AddTicks(3591),
                            RaitingPlayers = 4.2000000000000002,
                            RaitingTeachers = 4.2999999999999998,
                            Rules = "Собирайте животное, выбирая правильное название части тела на осетинском языке. За неправильные ответы вы теряете 5 очков. Когда животное собрано, требуется написать его название. Буква 'æ' считается как 2 символа (писать: 'ае').",
                            Title = "Собери животное"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = "aacde62d-a630-45a1-8ee5-dea31270329c",
                            CoverImageURL = "/img/games/93a62f0945389b9_920x0.jpg",
                            Description = "Используется текстовое, звуковое и графическое представление языка. Эта игра может быть использована как преподавателями осетинского языка в рамках учебного процесса, так и широким кругом пользователей просто для развлечения.\nНа верхней части страницы находиться кроссворд, который образован из множества вертикальных линий из квадратов, создающие в центре другую линию из квадратов. Каждая из колонок кроссворда помечена цифрой Под кроссвордом находятся вопросы на русском языке, где ответом является слово на осетинском. Это слово необходимо ввести в соответствующий номеру вопроса столбец. После ответа на все вопросы в центре кроссворда на выделенной строке составляется слово на русском языке. В ответ нужно ввести это слово, но на осетинском языке.",
                            GamePlatformId = 3,
                            GameURL = "скоро будет",
                            LanguageLevelId = 1,
                            LastUpdateDate = new DateTime(2025, 5, 14, 17, 36, 44, 82, DateTimeKind.Utc).AddTicks(3594),
                            NumberDownloads = 10,
                            PublicationDate = new DateTime(2025, 5, 14, 17, 36, 44, 82, DateTimeKind.Utc).AddTicks(3594),
                            RaitingPlayers = 5.0,
                            RaitingTeachers = 4.9000000000000004,
                            Rules = "Каждая из колонок кроссворда помечена цифрой Под кроссвордом находятся вопросы на русском языке, где ответом является слово на осетинском. Это слово необходимо ввести в соответствующий номеру вопроса столбец.",
                            Title = "Кроссворд осетинских слов"
                        });
                });

            modelBuilder.Entity("LingvoGameOs.Db.Models.GameGameType", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GameId", "GameTypeId");

                    b.HasIndex("GameTypeId");

                    b.ToTable("GameGameType", (string)null);

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            GameTypeId = 2
                        },
                        new
                        {
                            GameId = 2,
                            GameTypeId = 3
                        },
                        new
                        {
                            GameId = 1,
                            GameTypeId = 1
                        },
                        new
                        {
                            GameId = 2,
                            GameTypeId = 4
                        },
                        new
                        {
                            GameId = 3,
                            GameTypeId = 1
                        },
                        new
                        {
                            GameId = 3,
                            GameTypeId = 3
                        },
                        new
                        {
                            GameId = 4,
                            GameTypeId = 1
                        },
                        new
                        {
                            GameId = 4,
                            GameTypeId = 2
                        },
                        new
                        {
                            GameId = 4,
                            GameTypeId = 4
                        });
                });

            modelBuilder.Entity("LingvoGameOs.Db.Models.GameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GameTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Словарный запас"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Грамматика"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Аудирование"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Чтение"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Говорение"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Головоломка"
                        });
                });

            modelBuilder.Entity("LingvoGameOs.Db.Models.LanguageLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LanguageLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Начинающий"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Средний"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Продвинутый"
                        });
                });

            modelBuilder.Entity("LingvoGameOs.Db.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Web-Desktop"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Desktop"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Web-Mobile"
                        });
                });

            modelBuilder.Entity("LingvoGameOs.Db.Models.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Technologys");
                });

            modelBuilder.Entity("LingvoGameOs.Db.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageURL")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LingvoGameOs.Db.Models.Game", b =>
                {
                    b.HasOne("LingvoGameOs.Db.Models.Platform", "GamePlatform")
                        .WithMany()
                        .HasForeignKey("GamePlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LingvoGameOs.Db.Models.LanguageLevel", "LanguageLevel")
                        .WithMany()
                        .HasForeignKey("LanguageLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LingvoGameOs.Db.Models.User", null)
                        .WithMany("DevGames")
                        .HasForeignKey("UserId");

                    b.HasOne("LingvoGameOs.Db.Models.User", null)
                        .WithMany("PlayerGames")
                        .HasForeignKey("UserId1");

                    b.Navigation("GamePlatform");

                    b.Navigation("LanguageLevel");
                });

            modelBuilder.Entity("LingvoGameOs.Db.Models.GameGameType", b =>
                {
                    b.HasOne("LingvoGameOs.Db.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LingvoGameOs.Db.Models.GameType", "GameType")
                        .WithMany()
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LingvoGameOs.Db.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LingvoGameOs.Db.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LingvoGameOs.Db.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LingvoGameOs.Db.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LingvoGameOs.Db.Models.User", b =>
                {
                    b.Navigation("DevGames");

                    b.Navigation("PlayerGames");
                });
#pragma warning restore 612, 618
        }
    }
}
