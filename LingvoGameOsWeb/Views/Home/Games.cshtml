@model List<Game>

@{
    ViewData["Title"] = "Сипсок игр";
}

<link rel="stylesheet" href="/css/games-page.css" />

<section class="games">
    <div class="games__filter">
        @using (Html.AjaxBeginForm("Search", "Home", new AjaxOptions
         {
             HttpMethod = "get",
             UpdateTargetId = "all-games",
             LoadingElementId = "search-loading"
         }))
        {
            <div class="games__filter-search">
                @if (ViewBag.GameName != null)
                {
                    <input type="text" name="gameName" id="search-input" required value="@ViewBag.GameName" class="email-prompt-text-style games__search-input"
                           placeholder="Найти игру...">
                }
                else
                {
                    <input type="text" name="gameName" id="search-input" required class="email-prompt-text-style games__search-input" placeholder="Найти игру..." />
                }

                <button type="submit" class="games__search-button">Найти</button>
                <button type="button" onclick="resetGamesList()" class="games__search-button">Сброс</button>
            </div>
        }

        <!-- Индикатор активных фильтров -->
        <div id="active-filters" class="games__active-filters" style="display: none;">
            <span class="games__active-filters-label">Активные фильтры:</span>
            <div id="active-filters-list" class="games__active-filters-list"></div>
            <button type="button" onclick="clearAllFilters()" class="games__clear-filters-btn">Очистить все</button>
        </div>

        <div class="games__filter-dropdowns">
            <div class="games__dropdown">
                <button class="games__dropdown-toggle">
                    <span>Категории</span>
                    <img src="/icon/chevron-down.svg" alt="Chevron" class="games__chevron">
                </button>
                <div class="games__dropdown-menu">
                    <div class="games__dropdown-search">
                        <input type="text" class="games__dropdown-search-input" placeholder="Поиск...">
                    </div>
                    <ul class="games__dropdown-list">
                        @foreach (var skill in ViewBag.SkillsLearning)
                        {
                            <li class="games__dropdown-item" data-filter="category" data-value="@skill.ToLower()">
                                @skill
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <div class="games__dropdown">
                <button class="games__dropdown-toggle">
                    <span>Ключевые слова</span>
                    <img src="/icon/chevron-down.svg" alt="Chevron" class="games__chevron">
                </button>
                <div class="games__dropdown-menu">
                    <div class="games__dropdown-search">
                        <input type="text" class="games__dropdown-search-input" placeholder="Поиск...">
                    </div>
                    <ul class="games__dropdown-list">
                        <li class="games__dropdown-item" data-filter="keyword" data-value="культура">
                            Культура
                        </li>
                        <li class="games__dropdown-item" data-filter="keyword" data-value="история">
                            История
                        </li>
                        <li class="games__dropdown-item" data-filter="keyword" data-value="язык">
                            Язык
                        </li>
                    </ul>
                </div>
            </div>
            <div class="games__dropdown">
                <button class="games__dropdown-toggle">
                    <span>Рейтинг</span>
                    <img src="/icon/chevron-down.svg" alt="Chevron" class="games__chevron">
                </button>
                <div class="games__dropdown-menu">
                    <ul class="games__dropdown-list">
                        <li class="games__dropdown-item" data-filter="rating" data-value="5">
                            <img src="/icon/star.svg" alt="Star" class="rating-star filled"> 5
                        </li>
                        <li class="games__dropdown-item" data-filter="rating" data-value="4">
                            <img src="/icon/star.svg" alt="Star" class="rating-star filled"> 4
                        </li>
                        <li class="games__dropdown-item" data-filter="rating" data-value="3">
                            <img src="/icon/star.svg" alt="Star" class="rating-star filled"> 3
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    @if (ViewBag.GameName != null)
    {
        <!-- Это сейчас не отображается, не работает-->
        <h2 class="games__title">Игры по запросу: @ViewBag.GameName</h2>
    }
    else
    {
        <h2 class="games__title">Все игры</h2>
    }

    <!-- Индикатор загрузки -->
    <div id="search-loading" style="display: none; margin: 20px 0;">
        <!-- Тут хотелось бы спинер загрузки-->
        @* <div role="status">
                <span">Загрузка...</span>
            </div> *@
        <p class="game-play__loading-text">Идет поиск игр...</p>
    </div>

    <div class="games__list" id="all-games">
        @if (Model != null && Model.Any())
        {
            @foreach (var game in Model)
            {
                <div class="games__item"
                     data-rating="@game.RaitingPlayers"
                     data-categories="@(game.SkillsLearning != null ? string.Join(",", game.SkillsLearning.Select(s => s.Name.ToLower())) : "")"
                     data-keywords="@(game.SkillsLearning != null ? string.Join(",", game.SkillsLearning.Select(s => s.Name.ToLower())) : "")">
                    <img class="games__image" src="@game.CoverImagePath" alt="@game.Title">
                    <div class="games__content">
                        <h3 class="games__name">@game.Title</h3>
                        <div class="games__stats">
                            <span class="games__rating">
                                <img src="/icon/star.svg" alt="star" class="rating-star filled">
                                <img src="/icon/star.svg" alt="star" class="rating-star filled">
                                <img src="/icon/star.svg" alt="star" class="rating-star filled">
                                <img src="/icon/star.svg" alt="star" class="rating-star filled">
                                <img src="/icon/star.svg" alt="star" class="rating-star filled"> @game.RaitingPlayers
                            </span>
                            <span class="games__likes">
                                <img src="/icon/like2.svg" alt="like" class="stat-icon favorite-toggle"> 120
                            </span>
                            <span class="games__views">
                                <img src="/icon/eye.svg" alt="view" class="stat-icon"> @game.NumberDownloads
                            </span>
                        </div>
                        <div class="games__actions">
                            @if (game.GamePlatform.Name == "Desktop")
                            {
                                <a href="@game.GameURL" download role="button" class="games__button">Скачать</a>
                            }
                            else
                            {
                                <a asp-controller="Game" asp-action="Start" asp-route-idGame="@game.Id" class="games__button">Играть</a>
                            }
                            <a asp-controller="Game" asp-action="Details" asp-route-idGame="@game.Id" role="button" class="games__preview button">Подробнее</a>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</section>

@section Scripts {
    <script>
        // Полная функциональность фильтрации
        console.log('Скрипт загружен');
        
        // Ждем загрузки DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initDropdown);
        } else {
            initDropdown();
        }
        
        function initDropdown() {
            console.log('Инициализируем dropdown');
            
            // Находим кнопки
            const toggles = document.querySelectorAll('.games__dropdown-toggle');
            console.log('Найдено кнопок:', toggles.length);
            
            toggles.forEach(function(toggle, index) {
                console.log('Обрабатываем кнопку', index);
                
                toggle.onclick = function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('Клик по кнопке', index);
                    
                    const menu = this.nextElementSibling;
                    console.log('Меню:', menu);
                    
                    // Закрываем все
                    document.querySelectorAll('.games__dropdown-menu').forEach(m => m.classList.remove('active'));
                    document.querySelectorAll('.games__dropdown-toggle').forEach(t => t.classList.remove('active'));
                    
                    // Открываем текущее
                    menu.classList.add('active');
                    this.classList.add('active');
                    console.log('Открыто меню', index);
                };
            });
            
            // Закрытие при клике вне
            document.onclick = function(e) {
                if (!e.target.closest('.games__dropdown')) {
                    document.querySelectorAll('.games__dropdown-menu').forEach(m => m.classList.remove('active'));
                    document.querySelectorAll('.games__dropdown-toggle').forEach(t => t.classList.remove('active'));
                }
            };
            
            // Инициализация фильтров
            initFilters();
        }
        
        function initFilters() {
            // Загружаем сохраненные фильтры
            const savedFilters = JSON.parse(localStorage.getItem('gameFilters')) || {
                category: [],
                keyword: [],
                rating: []
            };
            
            // Находим элементы фильтрации
            const filterItems = document.querySelectorAll('.games__dropdown-item');
            console.log('Найдено элементов фильтрации:', filterItems.length);
            
            // Восстанавливаем состояние фильтров
            filterItems.forEach(function(item) {
                const filterType = item.dataset.filter;
                const value = item.dataset.value;
                
                if (savedFilters[filterType] && savedFilters[filterType].includes(value)) {
                    item.classList.add('selected');
                }
                
                // Добавляем обработчик клика
                item.onclick = function(e) {
                    e.stopPropagation();
                    
                    const filterType = this.dataset.filter;
                    const value = this.dataset.value;
                    const isSelected = this.classList.contains('selected');
                    
                    if (isSelected) {
                        // Убираем фильтр
                        this.classList.remove('selected');
                        savedFilters[filterType] = savedFilters[filterType].filter(v => v !== value);
                        showNotification(`Фильтр удален: ${this.textContent.trim()}`, 'warning');
                    } else {
                        // Добавляем фильтр
                        this.classList.add('selected');
                        if (!savedFilters[filterType]) {
                            savedFilters[filterType] = [];
                        }
                        savedFilters[filterType].push(value);
                        showNotification(`Фильтр применен: ${this.textContent.trim()}`, 'success');
                    }
                    
                    // Сохраняем и применяем фильтры
                    localStorage.setItem('gameFilters', JSON.stringify(savedFilters));
                    applyFilters(savedFilters);
                    updateActiveFiltersDisplay(savedFilters);
                };
            });
            
            // Поиск в dropdown
            const searchInputs = document.querySelectorAll('.games__dropdown-search-input');
            searchInputs.forEach(function(input) {
                input.oninput = function() {
                    const menu = this.closest('.games__dropdown-menu');
                    const items = menu.querySelectorAll('.games__dropdown-item');
                    const query = this.value.toLowerCase();
                    
                    items.forEach(function(item) {
                        const text = item.textContent.toLowerCase();
                        item.style.display = text.includes(query) ? 'flex' : 'none';
                    });
                };
            });
            
            // Применяем фильтры при загрузке
            applyFilters(savedFilters);
            updateActiveFiltersDisplay(savedFilters);
        }
        
        function applyFilters(filters) {
            const gameItems = document.querySelectorAll('.games__item');
            let visibleCount = 0;
            
            gameItems.forEach(function(item) {
                let isVisible = true;
                
                // Фильтр по категориям
                if (filters.category.length > 0) {
                    const categories = item.dataset.categories ? item.dataset.categories.split(',').map(c => c.trim().toLowerCase()) : [];
                    const hasMatchingCategory = filters.category.some(cat => 
                        categories.some(itemCat => itemCat === cat.toLowerCase())
                    );
                    if (!hasMatchingCategory) {
                        isVisible = false;
                    }
                }
                
                // Фильтр по ключевым словам
                if (filters.keyword.length > 0 && isVisible) {
                    const keywords = item.dataset.keywords ? item.dataset.keywords.split(',').map(k => k.trim().toLowerCase()) : [];
                    const hasMatchingKeyword = filters.keyword.some(keyword => 
                        keywords.some(itemKeyword => itemKeyword === keyword.toLowerCase())
                    );
                    if (!hasMatchingKeyword) {
                        isVisible = false;
                    }
                }
                
                // Фильтр по рейтингу
                if (filters.rating.length > 0 && isVisible) {
                    const rating = parseInt(item.dataset.rating) || 0;
                    const hasMatchingRating = filters.rating.some(r => rating >= parseInt(r));
                    if (!hasMatchingRating) {
                        isVisible = false;
                    }
                }
                
                // Показываем/скрываем элемент
                item.style.display = isVisible ? 'flex' : 'none';
                if (isVisible) visibleCount++;
            });
            
            // Показываем результат
            if (visibleCount === 0) {
                showNotification('Игры не найдены. Попробуйте изменить фильтры.', 'warning');
            } else if (visibleCount < gameItems.length) {
                showNotification(`Найдено игр: ${visibleCount} из ${gameItems.length}`, 'success');
            }
        }
        
        function updateActiveFiltersDisplay(filters) {
            const activeFiltersContainer = document.getElementById('active-filters');
            const activeFiltersList = document.getElementById('active-filters-list');
            
            const allFilters = [...filters.category, ...filters.keyword, ...filters.rating];
            
            if (allFilters.length > 0) {
                activeFiltersList.innerHTML = '';
                allFilters.forEach(function(filter) {
                    const filterTag = document.createElement('span');
                    filterTag.className = 'games__filter-tag';
                    filterTag.textContent = filter;
                    filterTag.onclick = function() {
                        // Удаляем конкретный фильтр
                        removeFilter(filter);
                    };
                    activeFiltersList.appendChild(filterTag);
                });
                activeFiltersContainer.style.display = 'flex';
            } else {
                activeFiltersContainer.style.display = 'none';
            }
            
            // Обновляем индикаторы на кнопках dropdown
            updateDropdownIndicators(filters);
        }
        
        function updateDropdownIndicators(filters) {
            const dropdownToggles = document.querySelectorAll('.games__dropdown-toggle');
            
            dropdownToggles.forEach(function(toggle, index) {
                let hasFilters = false;
                
                switch(index) {
                    case 0: // Категории
                        hasFilters = filters.category.length > 0;
                        break;
                    case 1: // Ключевые слова
                        hasFilters = filters.keyword.length > 0;
                        break;
                    case 2: // Рейтинг
                        hasFilters = filters.rating.length > 0;
                        break;
                }
                
                if (hasFilters) {
                    toggle.classList.add('has-filters');
                } else {
                    toggle.classList.remove('has-filters');
                }
            });
        }
        
        function removeFilter(filterValue) {
            const savedFilters = JSON.parse(localStorage.getItem('gameFilters')) || {
                category: [],
                keyword: [],
                rating: []
            };
            
            // Удаляем фильтр из всех типов
            Object.keys(savedFilters).forEach(function(type) {
                savedFilters[type] = savedFilters[type].filter(v => v !== filterValue);
            });
            
            // Убираем выделение с элемента
            const filterItem = document.querySelector(`[data-value="${filterValue}"]`);
            if (filterItem) {
                filterItem.classList.remove('selected');
            }
            
            // Сохраняем и применяем
            localStorage.setItem('gameFilters', JSON.stringify(savedFilters));
            applyFilters(savedFilters);
            updateActiveFiltersDisplay(savedFilters);
            showNotification(`Фильтр удален: ${filterValue}`, 'warning');
        }
        
        function showNotification(message, type) {
            console.log('Показываем уведомление:', message, type);
            
            let notification = document.querySelector('.notification');
            if (!notification) {
                notification = document.createElement('div');
                notification.className = 'notification';
                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 12px 20px;
                    border-radius: 8px;
                    color: white;
                    font-weight: 500;
                    z-index: 1000;
                    opacity: 0;
                    transition: opacity 0.3s ease;
                    max-width: 300px;
                `;
                document.body.appendChild(notification);
            }
            
            notification.textContent = message;
            notification.className = `notification notification--${type}`;
            notification.style.display = 'block';
            notification.style.opacity = '1';
            
            setTimeout(function() {
                notification.style.opacity = '0';
                setTimeout(function() {
                    notification.style.display = 'none';
                }, 300);
            }, 3000);
        }
    </script>
    
    <script>
        function resetGamesList() {
            $('#search-input').val('');
            $('#all-games').load('@Url.Action("FullGamesList", "Home")');
        }

        function clearAllFilters() {
            localStorage.removeItem('gameFilters');
            document.querySelectorAll('.games__dropdown-item.selected').forEach(item => {
                item.classList.remove('selected');
            });
            document.getElementById('active-filters').style.display = 'none';
            document.querySelectorAll('.games__item').forEach(item => {
                item.style.display = 'flex';
            });
            showNotification('Все фильтры очищены', 'info');
        }
    </script>
}